# To make the root filesystem
FROM kernel.arm-unknown-linux-gnueabi

ARG BUSYBOX_RELEASE=1_36_stable
ARG FS_ROOT=fsroot

ENV FS_ROOT=$FS_ROOT
ENV ARCH=$ARCH
ENV TOOLCHAIN="$TOOLCHAIN"-

RUN sudo apt install -y cpio

WORKDIR /build
RUN git clone https://git.busybox.net/busybox.git
WORKDIR /build/busybox
RUN git checkout "$BUSYBOX_RELEASE"

RUN make distclean
RUN make defconfig

# Substitute our FS_ROOT for the CONFIG_PREFIX
RUN sed -i "s|^\(CONFIG_PREFIX\)=.*$|\1=\"$FS_ROOT\"|g" .config

# This will create the beginnings of our filesystem in $FS_ROOT, with busybox
# symlinks for the basic utilities of a Linux system.
RUN make -j 4 && make install

# Copy the libraries needed *just* by busybox. It's basically libc and libm, but
# we'll find them.
WORKDIR /home/cross

# This has an extra path.
RUN "$TOOLCHAIN"readelf -a "$FS_ROOT"/bin/busybox | grep "program interpreter" | sed -e "s/\[\(.*\)\]/\1/g" | awk '{print $4}' | awk -F / '{print $3}' > copy_libs
RUN "$TOOLCHAIN"readelf -a "$FS_ROOT"/bin/busybox | grep "Shared library" | sed "s/\[\(.*\)\]/\1/g" | awk '{print $5}' >> copy_libs

# Get this into our environment by creating our .bashrc. Since TOOLCHAIN itself
# doesn't carry into sudo, get the sysroot and write it to the file, then sudo
# to cat the contents to bash.bashrc. (We could do a one liner, but this is
# already getting hard to follow.
RUN sh -c 'echo export SYSROOT=$("$TOOLCHAIN"gcc -print-sysroot) > sysroot.env'
RUN sudo sh -c 'cat sysroot.env >> /etc/bash.bashrc'

# Minimal population for lib
WORKDIR "$FS_ROOT"
RUN mkdir "$FS_ROOT"/lib
RUN . ../sysroot.env ;  for f in $(cat ../copy_libs) ; do cp -a "$SYSROOT"/lib/"$f" lib ; done
RUN . ../sysroot.env ; for f in $(cat ../copy_libs) ; do \
    target=$(readlink "$SYSROOT"/lib/"$f") ; \
    if [ ! -z "$target" ] ; then cp -a "$SYSROOT"/lib/"$target" lib ; fi ;\
    done
#RUN rm ../copy_libs

# Minimal population for devs
RUN mkdir "$FS_ROOT"/dev
RUN sudo mknod -m 666 dev/null c 1 3
RUN sudo mknod -m 600 dev/console c 5 1

# skip mounting, since we have to do that after boot

# kernel modules
# somehow we remember where this is.
WORKDIR /build/kernel/linux-stable
# This needs depmod
RUN make INSTALL_MOD_PATH="$FS_ROOT" modules_install


# Build the initramfs. Maybe we will use just the root, but
WORKDIR "$FS_ROOT"
RUN find . | cpio -H newc -ov --owner root:root > ../initramfs.cpio
WORKDIR /home/cross
RUN gzip initramfs.cpio
RUN mkimage -A "$ARCH" -O linux -T ramdisk -d initramfs.cpio.gz uRamdisk

CMD sudo sh -c "cp initramfs.cpio.gz /output"